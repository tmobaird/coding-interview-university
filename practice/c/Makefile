# If we're on a Linux / BSD / Unix / whatever type of OS,
# we're going to want to use commands like "rm" while if
# we're working with Windows (even with MinGW), we're going
# to want to use "del".
ifeq ($(OS),Windows_NT)
  ifeq ($(shell uname -s),) # not in a bash-like shell
	CLEANUP = del /F /Q
	MKDIR = mkdir
  else # in a bash-like shell, like msys
	CLEANUP = rm -f
	MKDIR = mkdir -p
  endif
	TARGET_EXTENSION=.exe
else
	CLEANUP = rm -f
	MKDIR = mkdir -p
	TARGET_EXTENSION=out
endif

# Keeps some of the keywords we've created from getting executed EVERY time we run make.
.PHONY: clean
.PHONY: test

# Collect all our paths together in one convenient place
PATHU = /root/Unity/src/
PATHS = src/
PATHT = test/
PATHB = build/
PATHD = build/depends/
PATHO = build/objs/
PATHR = build/results/

BUILD_PATHS = $(PATHB) $(PATHD) $(PATHO) $(PATHR)

# Tell our compilier where to look for all the test files
SRCT = $(wildcard $(PATHT)*.c)

# Configure the toolchain we want to use. In our case,
# we're sticking with a very straightforward use of GCC.
# One thing worth noting, even though we are using gcc for
# compiling, linking, and dependency tracking,
# we've broken them out into separate commands. This serves three purposes:
#     It's easier to change what options you pass to each when you want to customize this.
#     It's easier to switch to a different toolchain, which likely uses different commands for these things
#     It's self-documenting when we get to the rules below.
COMPILE=gcc -c
LINK=gcc
DEPEND=gcc -MM -MG -MF
CFLAGS=-I. -I$(PATHU) -I$(PATHS) -DTEST

# This is where we actually create the results.
# This command is a little cryptic, so for more info
# check out the Rule 2: Creating Results section of
# http://www.throwtheswitch.org/build/make
RESULTS = $(patsubst $(PATHT)Test%.c,$(PATHR)Test%.txt,$(SRCT) )

PASSED = `grep -s PASS $(PATHR)*.txt`
FAIL = `grep -s FAIL $(PATHR)*.txt`
IGNORE = `grep -s IGNORE $(PATHR)*.txt`

# Summarizing Results
test: $(BUILD_PATHS) $(RESULTS)
	@echo "-----------------------\nIGNORES:\n-----------------------"
	@echo "\e[33m$(IGNORE)\e[39m"
	@echo "-----------------------\nFAILURES:\n-----------------------"
	@echo "\e[31m$(FAIL)\e[39m"
	@echo "-----------------------\nPASSED:\n-----------------------"
	@echo "\e[32m$(PASSED)\e[39m"
	@echo "\nDONE"

# This is where we actually create the results.
# This command is a little cryptic, so for more info
# check out the Rule 2: Creating Results section of
# http://www.throwtheswitch.org/build/make
$(PATHR)%.txt: $(PATHB)%.$(TARGET_EXTENSION)
	-./$< > $@ 2>&1

# Our executables are made up of object files.
# We could create a rule that directly derives our executables
# from C files, but by breaking it up, we only rebuild the things that need rebuilding.
# the ``$^`` at the end. This is makefile-speak for "all the dependencies."
# So we're saying that our Test executable is a combination of the following object files:
# Our Test object file, the source file named the same thing (minus the test), Unity itself,
# and the dependency file. We're going to pull in the additional dependencies generated by
# the dependency file in a moment.
$(PATHB)Test%.$(TARGET_EXTENSION): $(PATHO)Test%.o $(PATHO)%.o $(PATHU)unity.o #$(PATHD)Test%.d
	$(LINK) -o $@ $^

# We tell Make how to compile the C files into object files.
# We do this a few times because we want it to understand that there are
# multiple source directories it might want to pull from. This includes the
# test source, release source, and Unity source directories.
# The double colon tells Make that this rule is terminating. Therefore,
# if it can't find a C file associated with one of these rules,
# it should consider that to be a problem.
$(PATHO)%.o:: $(PATHT)%.c
	$(COMPILE) $(CFLAGS) $< -o $@

$(PATHO)%.o:: $(PATHS)%.c
	$(COMPILE) $(CFLAGS) $< -o $@

$(PATHO)%.o:: $(PATHU)%.c $(PATHU)%.h
	$(COMPILE) $(CFLAGS) $< -o $@

# Create dependencies
# For more information, check out RULE 5: DEPENDENCIES
# of http://www.throwtheswitch.org/build/make
$(PATHD)%.d:: $(PATHT)%.c
	$(DEPEND) $@ $<

$(PATHB):
	$(MKDIR) $(PATHB)

$(PATHD):
	$(MKDIR) $(PATHD)

$(PATHO):
	$(MKDIR) $(PATHO)

$(PATHR):
	$(MKDIR) $(PATHR)

clean:
	$(CLEANUP) $(PATHO)*.o
	$(CLEANUP) $(PATHB)*.$(TARGET_EXTENSION)
	$(CLEANUP) $(PATHR)*.txt

# To rebuild only things that have changed:
# To do this, we tell Make that these intermediate
# files are important to us. We do that by using the built in keyword .PRECIOUS.
.PRECIOUS: $(PATHB)Test%.$(TARGET_EXTENSION)
.PRECIOUS: $(PATHD)%.d
.PRECIOUS: $(PATHO)%.o
.PRECIOUS: $(PATHR)%.txt
